stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  script:
    - docker build -t my-backend-image ./backend

build-nginx-job:
  stage: build
  script:
    - docker build -t custom-nginx:latest ./nginx

build-tgbot-job:
  stage: build
  script:
    - docker build -t my-tgbot-image ./tgbot

nginx-test-job:
  stage: test
  script:
    - echo "Testing Nginx configuration in docker-compose network"
    - docker-compose -f docker-compose.yml up -d backend
    - docker-compose -f docker-compose.yml run --rm nginx nginx -t
    - docker-compose -f docker-compose.yml down

backend-test-job:
  stage: test
  script:
    - echo "Testing backend"
    - echo "PROFILES = $PROFILES"
    - echo "ALLOWED_ORIGINS = $ALLOWED_ORIGINS"
    - echo "DB_URL = $DB_URL"
    - docker run --rm -e PROFILES="$PROFILES" -e ALLOWED_ORIGINS="$ALLOWED_ORIGINS" -e DB_URL="$DB_URL" my-backend-image pytest -s -v

tgbot-test-job:
  stage: test
  script:
    - echo "Testing Telegram Bot"
    - docker run --rm -e BOT_TOKEN="$BOT_TOKEN" my-tgbot-image python -c "print('TGBot Test Passed')"

deploy-job:
  stage: deploy
  script:
    - docker compose down --remove-orphans
    - docker compose up -d --force-recreate
    - docker update --restart=always my-backend-container my-nginx-container my-tgbot-container
